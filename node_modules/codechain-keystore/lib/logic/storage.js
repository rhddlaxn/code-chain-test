"use strict";
// The MIT License (MIT)
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) 2015 Alex Beregszaszi
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
var codechain_primitives_1 = require("codechain-primitives");
var crypto = require("crypto");
var uuid = require("uuid");
var keys_1 = require("../model/keys");
var crypto_1 = require("./crypto");
var error_1 = require("./error");
// copy code from https://github.com/ethereumjs/ethereumjs-wallet/blob/4c7cbfc12e142491eb5acc98e612f079aabe092e/src/index.js#L109
function encode(privateKey, keyType, passphrase, meta) {
    return __awaiter(this, void 0, void 0, function () {
        var publicKey, address, salt, iv, kdf, kdfparams, derivedKey, cipher, ciphertext, mac;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    publicKey = codechain_primitives_1.getPublicFromPrivate(privateKey);
                    address = keys_1.keyFromPublicKey(keyType, publicKey);
                    salt = crypto.randomBytes(32);
                    iv = crypto.randomBytes(16);
                    kdf = "pbkdf2";
                    kdfparams = {
                        dklen: 32,
                        salt: salt.toString("hex"),
                        c: 262144,
                        prf: "hmac-sha256"
                    };
                    return [4 /*yield*/, crypto_1.pbkdf2Async(Buffer.from(passphrase), salt, kdfparams.c, kdfparams.dklen, "sha256")];
                case 1:
                    derivedKey = _a.sent();
                    cipher = crypto.createCipheriv("aes-128-ctr", derivedKey.slice(0, 16), iv);
                    ciphertext = Buffer.concat([
                        cipher.update(Buffer.from(privateKey, "hex")),
                        cipher.final()
                    ]);
                    mac = codechain_primitives_1.blake256(Buffer.concat([
                        derivedKey.slice(16, 32),
                        Buffer.from(ciphertext, "hex")
                    ]));
                    return [2 /*return*/, {
                            crypto: {
                                ciphertext: ciphertext.toString("hex"),
                                cipherparams: {
                                    iv: iv.toString("hex")
                                },
                                cipher: "aes-128-ctr",
                                kdf: kdf,
                                kdfparams: kdfparams,
                                mac: mac
                            },
                            id: uuid.v4({
                                random: Array.prototype.slice.call(crypto.randomBytes(16), 0)
                            }),
                            version: 3,
                            address: address,
                            meta: meta
                        }];
            }
        });
    });
}
exports.encode = encode;
function decode(json, passphrase) {
    return __awaiter(this, void 0, void 0, function () {
        var kdfparams, derivedKey, ciphertext, mac, decipher, privateKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    kdfparams = json.crypto.kdfparams;
                    return [4 /*yield*/, crypto_1.pbkdf2Async(Buffer.from(passphrase), Buffer.from(kdfparams.salt, "hex"), kdfparams.c, kdfparams.dklen, "sha256")];
                case 1:
                    derivedKey = _a.sent();
                    ciphertext = Buffer.from(json.crypto.ciphertext, "hex");
                    mac = codechain_primitives_1.blake256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));
                    if (mac !== json.crypto.mac) {
                        throw new error_1.KeystoreError(error_1.ErrorCode.DecryptionFailed);
                    }
                    decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, "hex"));
                    privateKey = decipherBuffer(decipher, ciphertext);
                    return [2 /*return*/, privateKey.toString("hex")];
            }
        });
    });
}
exports.decode = decode;
function decipherBuffer(decipher, data) {
    return Buffer.concat([decipher.update(data), decipher.final()]);
}
//# sourceMappingURL=storage.js.map