"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var codechain_primitives_1 = require("codechain-primitives");
var context_1 = require("./context");
var storage_1 = require("./logic/storage");
var HDKeys = require("./model/hdkeys");
var initialize_1 = require("./model/initialize");
var Keys = require("./model/keys");
var keytypes_1 = require("./model/keytypes");
var CCKey = /** @class */ (function () {
    function CCKey(context) {
        this.context = context;
        this.platform = createKeyStore(this.context, keytypes_1.KeyType.Platform);
        this.asset = createKeyStore(this.context, keytypes_1.KeyType.Asset);
        this.hdwseed = createHDKeyStore(this.context);
    }
    CCKey.create = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var dbType, dbPath, context;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dbType = params.dbType || "persistent";
                        dbPath = params.dbPath || "keystore.db";
                        return [4 /*yield*/, context_1.createContext({
                                dbType: dbType,
                                dbPath: dbPath
                            })];
                    case 1:
                        context = _a.sent();
                        return [2 /*return*/, new CCKey(context)];
                }
            });
        });
    };
    CCKey.exist = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var dbType, dbPath;
            return __generator(this, function (_a) {
                dbType = params.dbType || "persistent";
                dbPath = params.dbPath || "keystore.db";
                return [2 /*return*/, context_1.storageExist({ dbType: dbType, dbPath: dbPath })];
            });
        });
    };
    CCKey.prototype.getMeta = function () {
        return this.context.db.get("meta").value();
    };
    CCKey.prototype.setMeta = function (meta) {
        return this.context.db.set("meta", meta).write();
    };
    CCKey.prototype.close = function () {
        return context_1.closeContext(this.context);
    };
    CCKey.prototype.migrate = function (data, params) {
        return __awaiter(this, void 0, void 0, function () {
            var old, platform_keys, asset_keys, platform, asset;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        old = JSON.parse(data);
                        platform_keys = old.platform_keys;
                        asset_keys = old.asset_keys;
                        if (platform_keys.length !== params.platformPassphrase.length) {
                            throw new Error("The length of platform key doesn't match with the length of passphrase");
                        }
                        if (asset_keys.length !== params.assetPassphrase.length) {
                            throw new Error("The length of asset key doesn't match with the length of passphrase");
                        }
                        return [4 /*yield*/, Promise.all(platform_keys
                                .map(function (key) { return JSON.parse(key.secret); })
                                .map(function (storage, i) { return __awaiter(_this, void 0, void 0, function () {
                                var passphrase, privateKey, publicKey;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            passphrase = params.platformPassphrase[i];
                                            return [4 /*yield*/, storage_1.decode(storage, passphrase)];
                                        case 1:
                                            privateKey = _a.sent();
                                            publicKey = codechain_primitives_1.getPublicFromPrivate(privateKey);
                                            storage.address = Keys.keyFromPublicKey(keytypes_1.KeyType.Platform, publicKey);
                                            return [2 /*return*/, storage];
                                    }
                                });
                            }); }))];
                    case 1:
                        platform = _a.sent();
                        return [4 /*yield*/, Promise.all(asset_keys
                                .map(function (key) { return JSON.parse(key.secret); })
                                .map(function (storage, i) { return __awaiter(_this, void 0, void 0, function () {
                                var passphrase, privateKey, publicKey;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            passphrase = params.assetPassphrase[i];
                                            return [4 /*yield*/, storage_1.decode(storage, passphrase)];
                                        case 1:
                                            privateKey = _a.sent();
                                            publicKey = codechain_primitives_1.getPublicFromPrivate(privateKey);
                                            storage.address = Keys.keyFromPublicKey(keytypes_1.KeyType.Asset, publicKey);
                                            return [2 /*return*/, storage];
                                    }
                                });
                            }); }))];
                    case 2:
                        asset = _a.sent();
                        return [2 /*return*/, JSON.stringify({
                                meta: "{}",
                                platform: platform,
                                asset: asset,
                                hdwseed: []
                            })];
                }
            });
        });
    };
    CCKey.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var meta, platform, asset, hdwseed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMeta()];
                    case 1:
                        meta = _a.sent();
                        return [4 /*yield*/, this.platform.save()];
                    case 2:
                        platform = _a.sent();
                        return [4 /*yield*/, this.asset.save()];
                    case 3:
                        asset = _a.sent();
                        return [4 /*yield*/, this.hdwseed.save()];
                    case 4:
                        hdwseed = _a.sent();
                        return [2 /*return*/, JSON.stringify({
                                meta: meta,
                                platform: platform,
                                asset: asset,
                                hdwseed: hdwseed
                            })];
                }
            });
        });
    };
    CCKey.prototype.load = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = JSON.parse(value);
                        return [4 /*yield*/, this.setMeta(data.meta)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.platform.load(data.platform)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.asset.load(data.asset)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.hdwseed.load(data.hdwseed)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CCKey.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.db.unset("meta").write()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.platform.clear()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.asset.clear()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.hdwseed.clear()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, initialize_1.initialize(this.context.db)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CCKey.CCKey = CCKey;
    return CCKey;
}());
exports.CCKey = CCKey;
function createKeyStore(context, keyType) {
    return {
        getKeys: function () {
            return Keys.getKeys(context, { keyType: keyType });
        },
        importRaw: function (params) {
            return Keys.importRaw(context, __assign({}, params, { keyType: keyType }));
        },
        exportKey: function (params) {
            return Keys.exportKey(context, __assign({}, params, { keyType: keyType }));
        },
        importKey: function (params) {
            return Keys.importKey(context, __assign({}, params, { keyType: keyType }));
        },
        exportRawKey: function (params) {
            return Keys.exportRawKey(context, __assign({}, params, { keyType: keyType }));
        },
        getPublicKey: function (params) {
            return Keys.getPublicKey(context, __assign({}, params, { keyType: keyType }));
        },
        createKey: function (params) {
            return Keys.createKey(context, __assign({}, params, { keyType: keyType }));
        },
        deleteKey: function (params) {
            return Keys.deleteKey(context, __assign({}, params, { keyType: keyType }));
        },
        sign: function (params) {
            return Keys.sign(context, __assign({}, params, { keyType: keyType }));
        },
        getMeta: function (params) {
            return Keys.getMeta(context, __assign({}, params, { keyType: keyType }));
        },
        save: function () {
            return Keys.save(context, { keyType: keyType });
        },
        load: function (value) {
            return Keys.load(context, value, { keyType: keyType });
        },
        clear: function () {
            return Keys.clear(context, { keyType: keyType });
        }
    };
}
function createHDKeyStore(context) {
    return {
        getSeedHashes: function () {
            return HDKeys.getSeedHashes(context);
        },
        importSeed: function (params) {
            return HDKeys.importSeed(context, params);
        },
        importRawSeed: function (params) {
            return HDKeys.importRawSeed(context, params);
        },
        importMnemonic: function (params) {
            return HDKeys.importMnemonic(context, params);
        },
        exportSeed: function (params) {
            return HDKeys.exportSeed(context, params);
        },
        exportRawSeed: function (params) {
            return HDKeys.exportRawSeed(context, params);
        },
        exportMnemonic: function (params) {
            return HDKeys.exportMnemonic(context, params);
        },
        createSeed: function (params) {
            return HDKeys.createSeed(context, params);
        },
        deleteSeed: function (params) {
            return HDKeys.deleteSeed(context, params);
        },
        getPublicKeyFromSeed: function (params) {
            return HDKeys.getPublicKeyFromSeed(context, params);
        },
        getPrivateKeyFromSeed: function (params) {
            return HDKeys.getPrivateKeyFromSeed(context, params);
        },
        signFromSeed: function (params) {
            return HDKeys.signFromSeed(context, params);
        },
        getMeta: function (params) {
            return HDKeys.getMeta(context, params);
        },
        save: function () {
            return HDKeys.save(context);
        },
        load: function (value) {
            return HDKeys.load(context, value);
        },
        clear: function () {
            return HDKeys.clear(context);
        }
    };
}
module.exports = CCKey;
//# sourceMappingURL=index.js.map