"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var codechain_primitives_1 = require("codechain-primitives");
var index_1 = require("../index");
describe("HD wallet test", function () {
    var cckey;
    var passphrase = "satoshi";
    beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, index_1.CCKey.create({ dbType: "in-memory" })];
                case 1:
                    cckey = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            cckey.close();
            return [2 /*return*/];
        });
    }); });
    test("create and delete", function () { return __awaiter(_this, void 0, void 0, function () {
        var seedHash, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, cckey.hdwseed.createSeed({ passphrase: passphrase })];
                case 1:
                    seedHash = _c.sent();
                    _a = expect;
                    return [4 /*yield*/, cckey.hdwseed.getSeedHashes()];
                case 2:
                    _a.apply(void 0, [_c.sent()]).toEqual([seedHash]);
                    return [4 /*yield*/, cckey.hdwseed.deleteSeed({ seedHash: seedHash })];
                case 3:
                    _c.sent();
                    _b = expect;
                    return [4 /*yield*/, cckey.hdwseed.getSeedHashes()];
                case 4:
                    _b.apply(void 0, [_c.sent()]).toEqual([]);
                    return [2 /*return*/];
            }
        });
    }); });
    test.each(["m/0", "M/0", "m/0/1/2/3/4", "m/0'", "m/0'/1'/2'/3'/4'"])("get public key & private key - %p", function (path) { return __awaiter(_this, void 0, void 0, function () {
        var seedHash, publicKey, privateKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, cckey.hdwseed.createSeed({ passphrase: passphrase })];
                case 1:
                    seedHash = _a.sent();
                    return [4 /*yield*/, cckey.hdwseed.getPublicKeyFromSeed({
                            seedHash: seedHash,
                            path: path,
                            passphrase: passphrase
                        })];
                case 2:
                    publicKey = _a.sent();
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: path,
                            passphrase: passphrase
                        })];
                case 3:
                    privateKey = _a.sent();
                    expect(codechain_primitives_1.getPublicFromPrivate(privateKey)).toEqual(publicKey);
                    return [2 /*return*/];
            }
        });
    }); });
    test("export and import", function () { return __awaiter(_this, void 0, void 0, function () {
        var seedHash, masterKey, secret, _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, cckey.hdwseed.createSeed({ passphrase: passphrase })];
                case 1:
                    seedHash = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 2:
                    masterKey = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.exportSeed({
                            seedHash: seedHash,
                            passphrase: passphrase
                        })];
                case 3:
                    secret = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.deleteSeed({ seedHash: seedHash })];
                case 4:
                    _d.sent();
                    _a = expect;
                    return [4 /*yield*/, cckey.hdwseed.getSeedHashes()];
                case 5:
                    _a.apply(void 0, [_d.sent()]).not.toContain(seedHash);
                    _b = expect;
                    return [4 /*yield*/, cckey.hdwseed.importSeed({ secret: secret, passphrase: passphrase })];
                case 6:
                    _b.apply(void 0, [_d.sent()]).toEqual(seedHash);
                    _c = expect;
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 7: return [4 /*yield*/, _d.sent()];
                case 8:
                    _c.apply(void 0, [_d.sent()]).toEqual(masterKey);
                    return [2 /*return*/];
            }
        });
    }); });
    test("export raw and import raw", function () { return __awaiter(_this, void 0, void 0, function () {
        var seedHash, masterKey, seed, _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, cckey.hdwseed.createSeed({ passphrase: passphrase })];
                case 1:
                    seedHash = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 2:
                    masterKey = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.exportRawSeed({
                            seedHash: seedHash,
                            passphrase: passphrase
                        })];
                case 3:
                    seed = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.deleteSeed({ seedHash: seedHash })];
                case 4:
                    _d.sent();
                    _a = expect;
                    return [4 /*yield*/, cckey.hdwseed.getSeedHashes()];
                case 5:
                    _a.apply(void 0, [_d.sent()]).not.toContain(seedHash);
                    _b = expect;
                    return [4 /*yield*/, cckey.hdwseed.importRawSeed({ seed: seed, passphrase: passphrase })];
                case 6:
                    _b.apply(void 0, [_d.sent()]).toEqual(seedHash);
                    _c = expect;
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 7: return [4 /*yield*/, _d.sent()];
                case 8:
                    _c.apply(void 0, [_d.sent()]).toEqual(masterKey);
                    return [2 /*return*/];
            }
        });
    }); });
    test("export mnemonic and import mnemonic", function () { return __awaiter(_this, void 0, void 0, function () {
        var seedHash, masterKey, mnemonic, _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, cckey.hdwseed.createSeed({ passphrase: passphrase })];
                case 1:
                    seedHash = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 2:
                    masterKey = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.exportMnemonic({
                            seedHash: seedHash,
                            passphrase: passphrase
                        })];
                case 3:
                    mnemonic = _d.sent();
                    return [4 /*yield*/, cckey.hdwseed.deleteSeed({ seedHash: seedHash })];
                case 4:
                    _d.sent();
                    _a = expect;
                    return [4 /*yield*/, cckey.hdwseed.getSeedHashes()];
                case 5:
                    _a.apply(void 0, [_d.sent()]).not.toContain(seedHash);
                    _b = expect;
                    return [4 /*yield*/, cckey.hdwseed.importMnemonic({ mnemonic: mnemonic, passphrase: passphrase })];
                case 6:
                    _b.apply(void 0, [_d.sent()]).toEqual(seedHash);
                    _c = expect;
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 7: return [4 /*yield*/, _d.sent()];
                case 8:
                    _c.apply(void 0, [_d.sent()]).toEqual(masterKey);
                    return [2 /*return*/];
            }
        });
    }); });
    test.each([
        [
            "d0a8182a44b71802ba85d35fad626c6275a82afb943dfee10d851140a61f74df",
            "03013cde78fc0c9a1075585fc5b8d911063d10cb2c9afe9969eb37e64e1225e631ee32fd24b85a293012d5cd75aef8e832158aee4f9dc516d506983f6cb65974",
            "88c4410d6003f5b1f0a69d02b6df78b0f65b52eed496ac8d9779f31c7e73b864",
            "11d0905febae1234a37f66330f4548effe4076f7aee9aeb8370cb247ceb7ae9138cb626f955db35a24c51a4f881927968e37cad808c17a41abea5f07ac45b83800"
        ],
        [
            "0000000000000000000000000000000000000000000000000000000000000000",
            "5660b70c8770245fb97ce9a811885e8045a1f333a799dcd3035788606cc557544965a0da8b76d6292adff9e9b38190b842629184e62c76ee028e97bc845f59bc",
            "235b34cd7c9f6d7e4595ffe9ae4b1cb5606df8aca2b527d20a07c8f56b2342f4",
            "6ca5db955e9c82e07529d3ebee8336dec4a44837cf9c453618841f08f841f6f46a4083a01c322c1a89d7fc9a05bf4e2d0cacc2f0da67fda35a83fd4ce739ce4401"
        ],
        [
            "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
            "115e0cb655e65c687cd435a03c73503da216a50176023d2537f54334534bad27c2bc9f76b34a2fe68fc2a3c3c9af2922dceb904c9cd18a9e994ee2243b5da861",
            "8472fc35dbe9f8ccf7ed306295e84902c0e606e576e5cb3f6c32d98537a21282",
            "36106ab36b67d3947a072bd097613c9dd7612c1bb88ad5b3ce01c3e84e1216bf17d796a797c976e5e8f6180ca3503b6baeeefe80a3dcbedb1e9a0edcdd1343e900"
        ],
        [
            "ffffffffffffffffffffffffffffffff",
            "e01aa32243f6744a2607466304e326adc7cb77e67363341967bf4700be45391dc9a0066b1c6664a432505a20f714f474abe1a7350988c69ea886840b48af2570",
            "f1897f8c5fd5e11814f80c63eb21cc0c63d1623008f895e83c0e9a770fb66544",
            "11fca78e1985e951c9cc7a866626741cefe972a24dd1b68a5c53940436b33a026e0c4736b6b6bc4b3b50600cf8c780e4ca01772272d3664939c571d29fa5a1d800"
        ]
    ])("import fixed raw seed and check: %p", function (seed, pubkey, privkey, sign) { return __awaiter(_this, void 0, void 0, function () {
        var message, seedHash, _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    message = "0000000000000000000000000000000000000000000000000000000000000000";
                    return [4 /*yield*/, cckey.hdwseed.importRawSeed({
                            seed: seed,
                            passphrase: passphrase
                        })];
                case 1:
                    seedHash = _d.sent();
                    _a = expect;
                    return [4 /*yield*/, cckey.hdwseed.getPublicKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 2:
                    _a.apply(void 0, [_d.sent()]).toEqual(pubkey);
                    _b = expect;
                    return [4 /*yield*/, cckey.hdwseed.getPrivateKeyFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            passphrase: passphrase
                        })];
                case 3:
                    _b.apply(void 0, [_d.sent()]).toEqual(privkey);
                    _c = expect;
                    return [4 /*yield*/, cckey.hdwseed.signFromSeed({
                            seedHash: seedHash,
                            path: "m",
                            message: message,
                            passphrase: passphrase
                        })];
                case 4:
                    _c.apply(void 0, [_d.sent()]).toEqual(sign);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=hdwallet.spec.js.map