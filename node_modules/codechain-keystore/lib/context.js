"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var lowdb = require("lowdb");
var os = require("os");
var hdkeys_1 = require("./model/hdkeys");
var initialize_1 = require("./model/initialize");
var keys_1 = require("./model/keys");
var keytypes_1 = require("./model/keytypes");
function isBrowser() {
    return typeof window !== "undefined";
}
var memoryAdapter = require("lowdb/adapters/Memory");
var persistentAdapter = isBrowser()
    ? require("lowdb/adapters/LocalStorage")
    : require("lowdb/adapters/FileSync");
var volatileAdapter = isBrowser()
    ? require("lowdb-session-storage-adapter")
    : require("lowdb/adapters/FileSync");
function getAdapter(params) {
    switch (params.dbType) {
        case "persistent":
            return new persistentAdapter(params.dbPath);
        case "volatile": {
            var dbPath = isBrowser()
                ? params.dbPath
                : os.tmpdir() + "/" + params.dbPath;
            return new volatileAdapter(dbPath);
        }
        case "in-memory":
            return new memoryAdapter(params.dbPath);
        default:
            throw new Error("Not expected type: " + params.dbType);
    }
}
function storageExist(params) {
    return __awaiter(this, void 0, void 0, function () {
        var db, meta, platform, asset, hdwseed;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, lowdb(getAdapter(params))];
                case 1:
                    db = _a.sent();
                    meta = db.get("meta").value();
                    platform = db.get(keytypes_1.getTableName(keytypes_1.KeyType.Platform)).value();
                    asset = db.get(keytypes_1.getTableName(keytypes_1.KeyType.Asset)).value();
                    hdwseed = db.get(keytypes_1.getTableName(keytypes_1.KeyType.HDWSeed)).value();
                    return [2 /*return*/, ((meta != null && meta !== "") ||
                            (platform != null && platform.length !== 0) ||
                            (asset != null && asset.length !== 0) ||
                            (hdwseed != null && hdwseed.length !== 0))];
            }
        });
    });
}
exports.storageExist = storageExist;
function createContext(params) {
    return __awaiter(this, void 0, void 0, function () {
        var db;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, lowdb(getAdapter(params))];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, initialize_1.initialize(db)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, {
                            db: db,
                            isVolatile: params.dbType === "volatile"
                        }];
            }
        });
    });
}
exports.createContext = createContext;
function closeContext(context) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!context.isVolatile) return [3 /*break*/, 5];
                    return [4 /*yield*/, context.db.unset("meta").write()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, keys_1.clear(context, { keyType: keytypes_1.KeyType.Asset })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, keys_1.clear(context, { keyType: keytypes_1.KeyType.Platform })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, hdkeys_1.clear(context)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [2 /*return*/, Promise.resolve(context.db.write())];
            }
        });
    });
}
exports.closeContext = closeContext;
//# sourceMappingURL=context.js.map